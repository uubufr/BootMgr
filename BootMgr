#! /bin/bash
#
# script name: BootMgr
# autor: Sylvain Girod ( uubu at gmx dot fr )
# version: 0.04
# description: script for generate a simple Grub2 cfg on UEFI system
#               Including:
#                   users password
#                   Windows dual boot
#                   Module signature
#                   custom theme
# Warning: only tested on Fedora!
#
# Functions:
# Get_OS: Get linux distrib name
# Set_OS: Set linux distrib name
# Set_Root_User: Set Root password
# Set_User: Set User password
# Get_Win_BootId: Get Windows EFI part
# Is_Installed: Detect if BootMgr is installed
# Install_BootMgr: Install BootMgr
# Uninstall_BootMgr: remove BootMgr from the system
# Gen_Cfg: generate Grub.cfg
# Remove_Sig: delete .sig files
# Remove_Gpg: delete gpg key

# Funtion: Get_OS
# Description: Get linux distrib name
# Args: None
function Get_OS() {
    [ -r /etc/ubuntu-release ] && OS=ubuntu
    [ -r /etc/debian-release ] && OS=debian
    [ -r /etc/centos-release ] && OS=centos
    [ -r /etc/fedora-release ] && OS=fedora
    echo $OS
}

# Function: Set_OS
# Description: Set linux distrib name
# Args:
#   $1: grub.cfg path
function Set_OS() {
    OS=$(Get_OS)
    sed -i "s/%%OS%%/$OS/g" "$1"
}

# Function: Set_Root_User
# Description: Set Root password
# Args:
#   $1: grub.cfg path
function Set_Root_User() {
    if [ ! "$BOOTMGR_ROOTUSR" ]; then
        echo "Enter password for Root user, 2 times:"
        BOOTMGR_ROOTUSR=$(grub2-mkpasswd-pbkdf2 -l 512 -s 2048 -c 2048)
        BOOTMGR_ROOTUSR=${BOOTMGR_ROOTUSR##* }
        BOOTMGR_ROOTUSR="password_pbkdf2 root $BOOTMGR_ROOTUSR"
    fi
    sed -i "s/%%ROOTUSR%%/$BOOTMGR_ROOTUSR/g" "$1"
    sed -i -e "s/^BOOTMGR_ROOTUSR=.*$/BOOTMGR_ROOTUSR=\"$BOOTMGR_ROOTUSR\"/" /etc/BootMgr/BootMgr_.conf
}

# Function: Set_User
# Description: Set User password
# Args:
#   $1: grub.cfg path
function Set_User() {
    if [ ! "$BOOTMGR_SUPERUSER" ]; then
        echo "Enter UserName"; read -r NEWUSER;
        echo "Enter password for $NEWUSER user, 2 times:"
        BOOTMGR_SUPERUSER=$(grub2-mkpasswd-pbkdf2 -l 512 -s 2048 -c 2048)
        BOOTMGR_SUPERUSER=${BOOTMGR_SUPERUSER##* }
        BOOTMGR_SUPERUSER="password_pbkdf2 $NEWUSER $BOOTMGR_SUPERUSER"
    fi
    sed -i "s/%%USER%%/$BOOTMGR_SUPERUSER/g" "$1"
    sed -i -e "s/^BOOTMGR_SUPERUSER=.*$/BOOTMGR_SUPERUSER=\"$BOOTMGR_SUPERUSER\"/" /etc/BootMgr/BootMgr_.conf
    sed -i -e "s/%%WITHUSER%%/$NEWUSER/g" "$1"
}

# Function: Get_Win_BootId
# Description: Get Windows EFI part
# Args: None
function Get_Win_BootId() {
    for disk in $(ls /dev/disk/by-path/ ); do
        EFIPART=$(blkid /dev/disk/by-path/$disk | grep "EFI system partition")
        [ "$EFIPART" ] && break
    done
    if [ "$EFIPART" ]; then
        EFIPART=${EFIPART##* UUID=}; EFIPART=${EFIPART%% TYPE=*}
        echo "$EFIPART"
    fi
}

# Function: Is_Installed
# Description: Detect if BootMgr is installed
# Args: None
function Is_Installed() {
 OK=1
 [ -d /etc/BootMgr ] || OK=0
 [ -d /var/lib/BootMgr ] || OK=0
 [ -d /var/lib/BootMgr/themes ] || OK=0
 echo $OK
}

# Function: Install_BootMgr
# Description: Install BootMgr
# Args: None
function Install_BootMgr() {

    # BootMgr
    cp BootMgr /usr/local/bin/
    chown root:root /usr/local/bin/BootMgr
    chmod 700 /usr/local/bin/BootMgr
    
    # /etc/BootMgr
    [ -d /etc/BootMgr ] || mkdir /etc/BootMgr
    [ -r /etc/BootMgr/BootMgr_.conf ] || cp BootMgr_.conf /etc/BootMgr/
    [ -r /etc/BootMgr/grub.template ] || cp grub.template /etc/BootMgr/
    [ -d /etc/BootMgr/security ] || cp -r security /etc/BootMgr
    chown -R root:root  /etc/BootMgr; chmod -R 600 /etc/BootMgr
 
    # /var/lib/BootMgr
    [ -d /var/lib/BootMgr/ ] || mkdir -p /var/lib/BootMgr/themes
    cp -r themes/* /var/lib/BootMgr/themes/

    # grub dir and fonts
    [ -d /boot/efi/EFI/$(Get_OS)/themes ] || mkdir /boot/efi/EFI/$(Get_OS)/themes
    [ -d /boot/efi/EFI/$(Get_OS)/fonts ] || mkdir /boot/efi/EFI/$(Get_OS)/themes
    cp fonts/* /boot/efi/EFI/$(Get_OS)/fonts/
}

# Function: Uninstall_BootMgr
# Description: remove BootMgr from the system
# Args: None
function Uninstall_BootMgr() {
    rm -rf /etc/BootMgr
    rm -rf /var/lib/BootMgr
    rm /usr/local/bin/BootMgr
    echo "BootMgr removed, but not grub config and theme, please run grub2-mkconfig if you want to remove grub config"
}

function Set_Theme() {
    if [ -d /var/lib/BootMgr/themes/$1 ]; then
        sed -i -e "s/^BOOTMGR_THEME=.*$/BOOTMGR_THEME=\"$1\"/" /etc/BootMgr/BootMgr_.conf
        echo 0
    else
        echo 1
    fi
}

# Function: Gen_Cfg
# Description: generate Grub.cfg
# Args: None
function Gen_Cfg() {
    . /etc/BootMgr/BootMgr_.conf
    ### Copying templates ###
    [ -r /tmp/grub.cfg.tmp ] && rm /tmp/grub.cfg.tmp
    cp /etc/BootMgr/grub.template /tmp/grub.cfg.tmp

    ### Setting current OS (for icons):
    Set_OS /tmp/grub.cfg.tmp

    ### Setting Users Passwords:
    Set_Root_User /tmp/grub.cfg.tmp
    Set_User /tmp/grub.cfg.tmp

    ### Root ###:
    GRUBPART=$(mount -l | grep "/boot "); GRUBPART=${GRUBPART%% *}
    GRUBUUID=$(lsblk -o uuid $GRUBPART | tail -1)
    sed -i -e "s/%%UUIDROOT%%/$GRUBUUID/g" /tmp/grub.cfg.tmp

    ### Linux / part ###
    ROOTPART=$(mount -l | grep "/ "); ROOTPART=${ROOTPART%% *}
    sed -i -e "s|%%HDROOT%%|$ROOTPART|g" /tmp/grub.cfg.tmp

    ### Linux Options ###
    CURRENTCMDLINE=$(cat /proc/cmdline); CURRENTCMDLINE=${CURRENTCMDLINE#* }
    [ "$BOOTMGR_KERNELOPTS" ] || BOOTMGR_KERNELOPTS=$CURRENTCMDLINE
    sed -i -e "s|%%KERNELOPTS%%|$BOOTMGR_KERNELOPTS|g" /tmp/grub.cfg.tmp
    [ "$BOOTMGR_RESCUEOPTS" ] || BOOTMGR_RESCUEOPTS="ro single $CURRENTCMDLINE"
    sed -i -e "s|%%KERNELRESCUE%%|$BOOTMGR_RESCUEOPTS|g" /tmp/grub.cfg.tmp

    ### Lang and locale ###
    [ "$BOOTMGR_LANG" ] || BOOTMGR_LANG=en_US
    sed -i "s/%%LANG%%/$BOOTMGR_LANG/g" /tmp/grub.cfg.tmp
    [ -d /boot/efi/EFI/$(Get_OS)/locale ] || mkdir /boot/efi/EFI/$(Get_OS)/locale
    if [ -d /usr/share/locale/${BOOTMGR_LANG%%_*} ]; then
        cp /usr/share/locale/${BOOTMGR_LANG%%_*}/LC_MESSAGES/grub.mo /boot/efi/EFI/$(Get_OS)/locale/${BOOTMGR_LANG%%_*}.mo
    else
        echo "unable to find locale $BOOTMGR_LANG, please install manually"
    fi

    ### MENU ###
    [ "$BOOTMGR_TIMEOUT" ] || BOOTMGR_TIMEOUT=5
    sed -i "s/%%TIMEOUT%%/$BOOTMGR_TIMEOUT/g" /tmp/grub.cfg.tmp
    [ "$BOOTMGR_STYLE" ] || BOOTMGR_STYLE="menu"
    sed -i "s/%%STYLE%%/$BOOTMGR_STYLE/g" /tmp/grub.cfg.tmp


    ### Theme ###
    if [ -d /var/lib/BootMgr/themes/$BOOTMGR_THEME ]; then
        rm -rf /boot/efi/EFI/$(Get_OS)/themes/*
        cp -r /var/lib/BootMgr/themes/$BOOTMGR_THEME/* /boot/efi/EFI/$(Get_OS)/themes/
    else
        echo "Error, unable to find theme $BOOTMGR_THEME"
    fi

    ### Windows ###
    if [ "${BOOTMGR_WINDOWS^^}" == "YES" ]; then
        if [ "$BOOTMGR_WINBOOT" ]; then
            blkid --uuid $BOOTMGR_WINBOOT 2>/dev/null 1>/dev/null
            if [ $? -ne 0 ]; then
                echo "UUID disk: $BOOTMGR_WINBOOT not detected"
                WID=$(Get_Win_BootId)
            else
                WID=$BOOTMGR_WINBOOT
            fi
        else
            WID=$(Get_Win_BootId)
        fi

        if [ "$WID" == "" ]; then
            echo "Windows not found, ignoring"
        else
            sed -i -e "s/^##\(.*\)$/\1/g" /tmp/grub.cfg.tmp
            sed -i -e "s/%%WINROOTID%%/$WID/g" /tmp/grub.cfg.tmp
            sed -i -e "s/^BOOTMGR_WINBOOT=.*$/BOOTMGR_WINBOOT=$WID/g" /etc/BootMgr/BootMgr_.conf
        fi
    fi

    ### Signature ###
    if [ "${BOOTMGR_SIGN^^}" == YES ]; then
        sed -i -e "s/%%SIGN%%/enforce/g" /tmp/grub.cfg.tmp
    else
        sed -i -e "s/%%SIGN%%/no/g" /tmp/grub.cfg.tmp
    fi

    ### Install grub.cfg ###
    if [ "$1" == "test" ]; then
        DEST=bootmgr.cfg
    else
        DEST=grub.cfg
        mv /boot/efi/EFI/$(Get_OS)/grub.cfg /boot/efi/EFI/$(Get_OS)/grub.cfg-$(date '+%Y-%m-%d')
    fi
    mv /tmp/grub.cfg.tmp /boot/efi/EFI/$(Get_OS)/$DEST
    [ -r /boot/efi/EFI/$(Get_OS)/$DEST.sig ] && rm /boot/efi/EFI/$(Get_OS)/$DEST.sig
    [ -r /boot/efi/EFI/$(Get_OS)/themes/theme.txt.sig ] && rm /boot/efi/EFI/$(Get_OS)/themes/theme.txt.sig
    [ -r /boot/efi/EFI/$(Get_OS)/grubenv.sig ] && rm /boot/efi/EFI/$(Get_OS)/grubenv.sig
    [ -r /boot/grub2/grubenv.sig ] && rm /boot/grub2/grubenv.sig

    ### Signing Modules ###
    if [ "$BOOTMGR_PASS" ]; then
        SPASS=$BOOTMGR_PASS
    else
        SPASS=$(dd if=/dev/random bs=32 count=1 2>/dev/null | sha256sum -b | sed 's/ .*//')
    fi
    if [ ! "$BOOTMGR_KEY" ]; then
        sed -i -e "s|^Passphrase:.*$|Passphrase: $SPASS|g" /etc/BootMgr/security/genkey
        gpg --full-generate-key --batch /etc/BootMgr/security/genkey
    fi
    echo $SPASS > /dev/shm/passphrase
    
    SKEY=$(gpg --list-keys "GRUB Signing Modules" | grep -v "[pub|uid]" | grep -v "^$" | head -1 | awk '{print $1}')
    
    sed -i -e "s/^BOOTMGR_KEY=.*$/BOOTMGR_KEY=$SKEY/"g /etc/BootMgr/BootMgr_.conf
    sed -i -e "s|^BOOTMGR_PASS=.*$|BOOTMGR_PASS=$SPASS|"g /etc/BootMgr/BootMgr_.conf
    
    for TBS in $(find /boot -name "*.cfg" -or -name "*.mo" -or -name "*.mod" -or -name "vmlinuz*" -or -name "initramfs*" -or -name "grubenv" -or -name "theme.txt" -or -name "*.png" -or -name "*.jpg" -or -name "*.pf2" | grep -v ".sig"); do
        if [ -r $TBS.sig ]; then
            gpg --verify --default-key $SKEY --passphrase-file /dev/shm/passphrase $TBS.sig $TBS 2>/dev/null 1>/dev/null
            if [ $? -ne 0 ]; then
                echo "Error, $TBS signature incorrect!"
            fi
        else
            gpg --pinentry-mode loopback --default-key $SKEY --detach-sign --passphrase-file /dev/shm/passphrase $TBS 2>/dev/null 1>/dev/null
        fi
    done
    [ -r /boot/efi/EFI/$(Get_OS)/BootMgr.gpg ] && rm /boot/efi/EFI/$(Get_OS)/BootMgr.gpg
    gpg --export --default-key $SKEY --passphrase-file /dev/shm/passphrase -o /boot/efi/EFI/$(Get_OS)/BootMgr.gpg 2>/dev/null 1>/dev/null
    shred /dev/shm/passphrase
}

# Function: Remove_Sig
# Description: delete .sig files
# Args: None
function Remove_Sig() {
    for i in $(find /boot -name "*.sig"); do
        rm $i
    done
    echo "Warning: .sig files removed"
    rm -rf /boot/efi/EFI/"$(Get_OS)"/BootMgr.gpg
}

# Function: Remove_Gpg
# Description: delete gpg key
# Args: None
function Remove_Gpg() {
    gpg --delete-secret-key "$BOOTMGR_KEY"
    gpg --delete-key "$BOOTMGR_KEY"
    sed -i -e 's/^BOOTMGR_KEY=.*$/BOOTMGR_KEY=/' /etc/BootMgr/BootMgr_.conf
    sed -i -e 's/^BOOTMGR_PASS=.*$/BOOTMGR_PASS=/' /etc/BootMgr/BootMgr_.conf
    echo "Warning: gpg key deleted"
}

### We only run as root ###
if [  "$(id -u)" != "0" ]; then
    echo "this script must be run as root!"
    exit -1
fi

if [ "$(Is_Installed)" == "0" ] && [ "$1" != "install" ]; then
    echo "You must first install BootMgr before doing anything"
    exit -1
fi

[ -r /etc/BootMgr/BootMgr_.conf ] && . /etc/BootMgr/BootMgr_.conf
case "$1" in
    "install")
        Install_BootMgr
        ;;
    "uninstall")
        Uninstall_BootMgr
        ;;
    "theme")
        if [ "$(Set_Theme "$2")" == "0" ]; then
            Gen_Cfg
        else
            echo "Error, unable to find theme: $2"
        fi
        ;;
    "rekey")
        Remove_Sig
        Remove_Gpg
        Gen_Cfg
        ;;
    "resign")
        Remove_Sig
        Gen_Cfg
        ;;
    "test")
        Gen_Cfg test
        ;;
    "update")
        Gen_Cfg
        ;;
    *)
        echo "Usage: BootMgr [install|uninstall|theme|rekey|test|update]"
        echo "install|uninstall: install|remove BootMgr"
        echo "theme <theme name>: select and install existing theme (themes are under /var/lib/BootMgr/"
        echo "rekey: used for regenerate gpg key and resign"
        echo "resign: delete all .sig files, then update and resign"
        echo "test: generate bootmgr.cfg instead of grub.cfg"
        echo "update: regenerate grub.cfg"
        ;;
esac
